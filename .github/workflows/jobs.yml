# ci_tutorial/.github/workflows/jobs.yml
name: job

on:
  pull_request:
    branches: [ main ]

jobs:
  # unit test를 실행한다
  unit_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'pnpm'
    - run: pnpm install
    - run: pnpm test:unit
    # 성공 및 실패에 따라서 comment를 작성한다
    - name: Add comment to PR
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const name = '${{ github.workflow   }}';
          const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          const success = '${{ job.status }}' === 'success';
          const body = `${name}: ${success ? '✅ 유닛테스트 통과' : '❌ 유닛테스트 실패'}\n${url}`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })
  # e2e 테스트를 실행한다
  e2e_test:
    needs: unit_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: pnpm build
          start: pnpm preview
      # 성공 및 실패에 따라서 comment를 작성한다
      - name: Add comment to PR
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? '✅ e2e TEST 통과' : '❌ e2e TEST 실패'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
  # 테스트가 성공하면 chromatic을 실행한다
  chromatic-deployment:
    needs: [unit_test, e2e_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}